


DROP TABLE IF EXISTS imdb_ijs.tmp_movies;
CREATE TABLE imdb_ijs.tmp_movies (
  id int(11) NOT NULL DEFAULT 0,
  name varchar(100) DEFAULT NULL,
  year int(11) DEFAULT NULL,
  `rank` float DEFAULT NULL,
  PRIMARY KEY (id),
  KEY movies_name (name)
);

insert into imdb_ijs.tmp_movies values (1, 'Superman', null, null);
insert into imdb_ijs.tmp_movies values (2, 'National Geographic - a movie without actors', null, null);

--
-- Table structure for table roles
--

DROP TABLE IF EXISTS imdb_ijs.tmp_roles;
CREATE TABLE imdb_ijs.tmp_roles (
  actor_id int(11) NOT NULL,
  movie_id int(11) NOT NULL,
  role varchar(100) NOT NULL,
  PRIMARY KEY (actor_id,movie_id,role),
  KEY actor_id (actor_id),
  KEY movie_id (movie_id)
  # Notice - why are they removed here?
#  CONSTRAINT roles_ibfk_1 FOREIGN KEY (actor_id) REFERENCES actors (id) ON DELETE CASCADE ON UPDATE CASCADE,
#  CONSTRAINT roles_ibfk_2 FOREIGN KEY (movie_id) REFERENCES movies (id) ON DELETE CASCADE ON UPDATE CASCADE
) ;

insert into imdb_ijs.tmp_roles values (1, 1, 'Superman');
insert into imdb_ijs.tmp_roles values (-100, -100, 'A role in a non existing movie by a non existing actor');


# Just movies
Select * 
from
imdb_ijs.tmp_movies
;


# Just roles
Select * 
from
imdb_ijs.tmp_roles
;


# movies and thier matching roles, ONLY FOR MOVIES THAT HAVE A MATCHING ROLE
Select * 
from
imdb_ijs.tmp_movies as m
join
imdb_ijs.tmp_roles as r
on
m.id = r.movie_id
;


# ALL movies and thier matching roles, if the role exists
Select * 
from
imdb_ijs.tmp_movies as m
left join
imdb_ijs.tmp_roles as r
on
m.id = r.movie_id
;


# ALL movies and that DO NOT HAVE A MATCHING ROLE
Select * 
from
imdb_ijs.tmp_movies as m
left join
imdb_ijs.tmp_roles as r
on
m.id = r.movie_id
where
r.movie_id is null
;

# Right join works just like left join, if sides are switched.
# It is recommended to use only left joins for readability reasons.
# Using both left and right join is very confusing
# ALL roles and their matching movies, if the movie exists
Select * 
from
imdb_ijs.tmp_movies as m
right join
imdb_ijs.tmp_roles as r
on
m.id = r.movie_id
;

# How many rows will we get? Is it sepcific to these tables?
select count(*)
from
imdb_ijs.tmp_movies as m
join
imdb_ijs.tmp_roles as r
on
m.id = r.movie_id
where
r.movie_id is null
;
